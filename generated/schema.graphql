### This file was generated by Nexus Schema
### Do not make changes to this file directly


type CCCS {
  T1: Float!
  T2: Float!
  id: Int!
  mFirstNode: Int!
  mSecondNode: Int!
  pFirstNode: Int!
  pSecondNode: Int!
  transmission: Float!
}

type CCVS {
  T1: Float!
  T2: Float!
  id: Int!
  mFirstNode: Int!
  mSecondNode: Int!
  pFirstNode: Int!
  pSecondNode: Int!
  transmission: Float!
}

type CalculationDirectives {
  first: Float!
  functionType: FunctionType!
  id: Int!
  inNodeM: Int!
  inNodeP: Int!
  outNodeM: Int!
  outNodeP: Int!
  schemaId: Int!
  second: Float!
  third: Float!
}

type Capacitor {
  capacity: Float!
  id: Int!
  mNode: Int!
  pNode: Int!
  schemaId: Int!
}

enum FunctionType {
  LINEAR
  LOGARITHMIC
  SINGLE
}

type Inductor {
  id: Int!
  induction: Float!
  mNode: Int!
  pNode: Int!
  schemaId: Int!
}

input InputBipolarTransistors {
  Cc: Float!
  Ce: Float!
  Rb: Float!
  Rc: Float!
  Re: Float!
  b: Float!
  nb: Int!
  nc: Int!
  ne: Int!
}

input InputCapacitorsType {
  capacity: Int!
  mNode: Int!
  pNode: Int!
}

input InputControlledSource {
  T1: Float = 0
  T2: Float = 0
  mFirstNode: Int!
  mSecondNode: Int!
  pFirstNode: Int!
  pSecondNode: Int!
  transmission: Float!
}

input InputIdealOperationAmplifiersType {
  mFirstNode: Int!
  mSecondNode: Int!
  pFirstNode: Int!
  pSecondNode: Int!
}

input InputIdealTransformersType {
  gain: Int!
  mFirstNode: Int!
  mSecondNode: Int!
  pFirstNode: Int!
  pSecondNode: Int!
}

input InputInductorsType {
  induction: Int!
  mNode: Int!
  pNode: Int!
}

input InputOperationAmplifiersType {
  fT: Int!
  mFirstNode: Int!
  mSecondNode: Int!
  pFirstNode: Int!
  pSecondNode: Int!
  rIn: Int!
  rOut: Int!
  u: Int!
}

input InputResistorsType {
  mNode: Int!
  pNode: Int!
  resistance: Float!
}

input InputTransformers {
  L1: Int!
  L2: Int!
  M: Int!
  R1: Int!
  R2: Int!
  mFirstNode: Int!
  mSecondNode: Int!
  pFirstNode: Int!
  pSecondNode: Int!
}

input InputUnipolarTransistors {
  Csi: Float!
  Czi: Float!
  Czs: Float!
  Rc: Float!
  S: Float!
  ni: Int!
  ns: Int!
  nz: Int!
}

type Mutation {
  activateAccount(
    """jwt with user  login"""
    token: String!
  ): User

  """add bipolar transistor to schema"""
  addBipolarTransistor(data: InputBipolarTransistors!, schemaId: Int!): bipolarTransistor

  """add CCCS or CCCS freq depended to schema"""
  addCCCS(data: InputControlledSource!, schemaId: Int!): CCCS

  """add CCVS or CCVS freq depended to schema"""
  addCCVS(data: InputControlledSource!, schemaId: Int!): CCVS

  """add capacitor to Schema"""
  addCapacitor(data: InputCapacitorsType!, schemaId: Int!): Capacitor

  """add ideal operation amplifier to Schema"""
  addIdealOperationAmplifier(data: InputIdealOperationAmplifiersType!, schemaId: Int!): idealOperationAmplifier

  """add ideal transformer to Schema"""
  addIdealTransformer(data: InputIdealTransformersType!, schemaId: Int!): idealTransformer

  """add inductor to Schema"""
  addInductor(data: InputInductorsType!, schemaId: Int!): Inductor

  """add operation amplifier to Schema"""
  addOperationAmplifier(data: InputOperationAmplifiersType!, schemaId: Int!): operationAmplifier

  """add resistor i Schema"""
  addResistor(data: InputResistorsType!, schemaId: Int!): Resistor

  """add transformer to Schema"""
  addTransformer(data: InputTransformers!, schemaId: Int!): transformer

  """add unipolar transistor to schema"""
  addUnipolarTransistor(data: InputUnipolarTransistors!, schemaId: Int!): unipolarTransistor

  """add VCCS or VCCS freq depended to schema"""
  addVCCS(data: InputControlledSource!, schemaId: Int!): VCCS

  """add VCVS or VCVS freq depended to schema"""
  addVCVS(data: InputControlledSource!, schemaId: Int!): VCVS

  """check user authenticated or not"""
  authUser: User
  calculateSchema(id: Int!): String

  """Change changeBipolarTransistor elem"""
  changeBipolarTransistor(data: InputBipolarTransistors!, elemId: Int!): String

  """Change CCCS and CCCS freq depended elem"""
  changeCCCS(data: InputControlledSource!, elemId: Int!): String

  """Change CCVS and CCVS freq depended elem"""
  changeCCVS(data: InputControlledSource!, elemId: Int!): String

  """Change capacitor in Schema"""
  changeCapacitor(data: InputCapacitorsType!, elemId: Int!): String

  """change function in calculation directives"""
  changeFunction(first: Float!, schemaId: Int!, second: Float!, third: Float!, type: FunctionType!): String

  """Change ideal operation amplifier in Schema"""
  changeIdealOperationAmplifier(data: InputIdealOperationAmplifiersType!, elemId: Int!): String

  """Change ideal transformer in Schema"""
  changeIdealTransformer(data: InputIdealTransformersType!, elemId: Int!): String

  """change input node"""
  changeInNode(minus: Int!, plus: Int!, schemaId: Int!): CalculationDirectives

  """Change inductor in Schema"""
  changeInductor(data: InputInductorsType!, elemId: Int!): String

  """change nodes in schema"""
  changeNodes(nodes: Int!, schemaId: Int!): String

  """Change operation amplifier in Schema"""
  changeOperationAmplifier(data: InputOperationAmplifiersType!, elemId: Int!): String

  """change output node"""
  changeOutNode(minus: Int!, plus: Int!, schemaId: Int!): CalculationDirectives

  """Change resistors in Schema"""
  changeResistor(data: InputResistorsType!, elemId: Int!): String

  """Change transformer in Schema"""
  changeTransformer(data: InputTransformers!, elemId: Int!): String

  """Change changeUnipolarTransistor elem"""
  changeUnipolarTransistor(data: InputUnipolarTransistors!, elemId: Int!): String

  """Change VCCS and VCCS freq depended elem"""
  changeVCCS(data: InputControlledSource!, elemId: Int!): String

  """Change VCVS and VCVS freq depended elem"""
  changeVCVS(data: InputControlledSource!, elemId: Int!): String

  """add bipolar transistors to schema and database"""
  createBipolarTransistors(bipolarTransistors: [InputBipolarTransistors!]!, schemaId: Int!): bipolarTransistor

  """add CCCSs to schema and database"""
  createCCCSs(CCCSs: [InputControlledSource!]!, schemaId: Int!): CCCS

  """add CCVSs to schema and database"""
  createCCVSs(CCVSs: [InputControlledSource!]!, schemaId: Int!): CCVS

  """create Calculation Directives"""
  createCalculationDirectives(firstFuncElem: Float!, functionType: FunctionType!, inM: Int!, inP: Int!, outM: Int!, outP: Int!, schemaId: Int!, secondFuncElem: Float!, thirdFuncElem: Float!): CalculationDirectives

  """add capacitors of schema to database"""
  createCapacitors(capacitors: [InputCapacitorsType!]!, schemaId: Int!): Capacitor

  """add Operation Amplifiers of schema to database"""
  createIdealOperationAmplifiers(idealOperationAmplifiers: [InputIdealOperationAmplifiersType!]!, schemaId: Int!): idealOperationAmplifier

  """add ideal transformers to schema and database"""
  createIdealTransformers(idealTransformers: [InputIdealTransformersType!]!, schemaId: Int!): idealTransformer

  """add inductors to schema and database"""
  createInductors(inductors: [InputInductorsType!]!, schemaId: Int!): Inductor

  """add Operation Amplifiers of schema to database"""
  createOperationAmplifiers(operationAmplifiers: [InputOperationAmplifiersType!]!, schemaId: Int!): operationAmplifier

  """add resistors to schema and database"""
  createResistors(resistors: [InputResistorsType!]!, schemaId: Int!): Resistor

  """add schema parameters to database"""
  createSchema(CCCSs: Int!, CCVSs: Int!, VCCSs: Int!, VCVSs: Int!, bipolarTransistors: Int!, capacitors: Int!, idealOperationAmplifiers: Int!, idealTransformers: Int!, inductors: Int!, name: String!, nodes: Int!, operationAmplifiers: Int!, resistors: Int!, transformers: Int!, unipolarTransistors: Int!): Schema

  """add transformers to schema and database"""
  createTransformers(schemaId: Int!, transformers: [InputTransformers!]!): transformer

  """add bipolar transistors to schema and database"""
  createUnipolarTransistors(schemaId: Int!, unipolarTransistors: [InputUnipolarTransistors!]!): unipolarTransistor

  """create User"""
  createUser(
    """user email as string"""
    email: String!

    """user login"""
    login: String!

    """user name"""
    name: String!

    """user password as string"""
    password: String!

    """user number as string"""
    phoneNumber: String!

    """user surname"""
    surname: String!
  ): User

  """add VCCSs to database and schema"""
  createVCCSs(VCCSs: [InputControlledSource!]!, schemaId: Int!): VCCS

  """add VCVSs to schema and database"""
  createVCVSs(VCVSs: [InputControlledSource!]!, schemaId: Int!): VCVS

  """delete bipolar transistor in schema in schema"""
  deleteBipolarTransistor(elemId: Int!): String

  """delete CCCS in schema"""
  deleteCCCS(elemId: Int!): String

  """delete CCVS in schema"""
  deleteCCVS(elemId: Int!): String

  """delete capacitor in Schema"""
  deleteCapacitor(elemId: Int!): String

  """delete ideal operation amplifier in Schema"""
  deleteIdealOperationAmplifier(elemId: Int!): String

  """delete ideal transformer in Schema"""
  deleteIdealTransformer(elemId: Int!): String

  """delete inductor in Schema"""
  deleteInductor(elemId: Int!): String

  """delete operation Amplifier in Schema"""
  deleteOperationAmplifier(elemId: Int!): String

  """delete resistors in Schema"""
  deleteResistor(elemId: Int!): String

  """delete transformer in Schema"""
  deleteTransformer(elemId: Int!): String

  """delete unipolar transistor in schema in schema"""
  deleteUnipolarTransistor(elemId: Int!): String

  """delete VCCS in schema"""
  deleteVCCS(elemId: Int!): String

  """delete VCVS in schema"""
  deleteVCVS(elemId: Int!): String

  """Mutation to authenticate user and send back tokens"""
  loginUser(
    """User login"""
    login: String!

    """user password as string"""
    password: String!
  ): User

  """logout user and remove cookies"""
  logoutUser: User

  """refresh token"""
  refreshAccessToken(
    """refresh token"""
    token: String
  ): User!

  """reset user password in database"""
  resetPassword(
    """user id"""
    id: Int!

    """new user password as string"""
    password: String!
  ): User

  """Validate link and give user access to reset page"""
  resetPasswordAuth(
    """jwt with user id"""
    token: String!
  ): User

  """Send to user email link to reset password"""
  resetPasswordLink(
    """user email as string"""
    email: String!
  ): User

  """upload to server user picture and store its path in database"""
  uploadUserPicture(picture: Upload!): User
}

type Query {
  """get all schema data"""
  getSchema(id: Int!): Schema

  """get result of schema calculations"""
  getSchemaResults(id: Int!): [SchemaResults]

  """Get user data"""
  getUserData: User

  """Get user login"""
  getUserLogin: User

  """get all user schemes by user id"""
  getUserSchemes: [Schema]
}

type Resistor {
  id: Int!
  mNode: Int!
  pNode: Int!
  resistance: Float!
  schemaId: Int!
}

enum Role {
  ADMIN
  PREMIUMUSER
  USER
}

type Schema {
  CCCSs: [CCCS]
  CCCSsFreqDependent: [CCCS]
  CCVSs: [CCVS]
  CCVSsFreqDependent: [CCVS]
  UserId: Int!
  VCCSs: [VCCS]
  VCCSsFreqDependent: [VCCS]
  VCVSs: [VCVS]
  VCVSsFreqDependent: [VCVS]
  bipolarTransistors: [bipolarTransistor]
  calculationDirectives: CalculationDirectives
  capacitors: [Capacitor]
  id: Int!
  idealOperationAmplifiers: [idealOperationAmplifier]
  idealTransformers: [idealTransformer]
  inductors: [Inductor]
  name: String!
  nc: Int!
  nei: Int!
  nev: Int!
  nf: Int!
  nji: Int!
  nju: Int!
  nl: Int!
  nou: Int!
  noui: Int!
  nr: Int!
  ntb: Int!
  ntr: Int!
  ntri: Int!
  ntu: Int!
  nv: Int!
  operationAmplifiers: [operationAmplifier]
  resistors: [Resistor]
  transformers: [transformer]
  unipolarTransistors: [unipolarTransistor]
}

type SchemaResults {
  f: Float!
  id: Int!
  kua: Float!
  kum: Float!
  ria: Float!
  rim: Float!
  roa: Float!
  rom: Float!
  schemaId: Int!
}

type Subscription {
  schemaSubscription: [SchemaResults]
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

"""User type"""
type User {
  accessToken: String
  email: String!
  id: Int!
  login: String!
  name: String!
  password: String!
  phoneNumber: String!
  picture: String!
  refreshToken: String!
  role: Role!
  surname: String!
}

type VCCS {
  T1: Float!
  T2: Float!
  id: Int!
  mFirstNode: Int!
  mSecondNode: Int!
  pFirstNode: Int!
  pSecondNode: Int!
  transmission: Float!
}

type VCVS {
  T1: Float!
  T2: Float!
  id: Int!
  mFirstNode: Int!
  mSecondNode: Int!
  pFirstNode: Int!
  pSecondNode: Int!
  transmission: Float!
}

type bipolarTransistor {
  Cc: Float!
  Ce: Float!
  Rb: Float!
  Rc: Float!
  Re: Float!
  b: Float!
  id: Int!
  nb: Int!
  nc: Int!
  ne: Int!
}

type idealOperationAmplifier {
  id: Int!
  mFirstNode: Int!
  mSecondNode: Int!
  pFirstNode: Int!
  pSecondNode: Int!
}

type idealTransformer {
  gain: Float!
  id: Int!
  mFirstNode: Int!
  mSecondNode: Int!
  pFirstNode: Int!
  pSecondNode: Int!
}

type operationAmplifier {
  fT: Float!
  id: Int!
  mFirstNode: Int!
  mSecondNode: Int!
  pFirstNode: Int!
  pSecondNode: Int!
  rIn: Float!
  rOut: Float!
  u: Float!
}

type schemaChanged {
  schemaId: Int
}

type transformer {
  L1: Float!
  L2: Float!
  M: Float!
  R1: Float!
  R2: Float!
  id: Int!
  mFirstNode: Int!
  mSecondNode: Int!
  pFirstNode: Int!
  pSecondNode: Int!
}

type unipolarTransistor {
  Csi: Float!
  Czi: Float!
  Czs: Float!
  Rc: Float!
  S: Float!
  id: Int!
  ni: Int!
  ns: Int!
  nz: Int!
  schemaId: Int!
}